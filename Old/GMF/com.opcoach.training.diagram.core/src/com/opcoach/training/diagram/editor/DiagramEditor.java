// ------------------------------------------------
// OPCoach Training Projects
// © OPCoach 2009     http://www.opcoach.com
// ------------------------------------------------ 

package com.opcoach.training.diagram.editor;

import java.io.IOException;
import java.util.EventObject;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.command.BasicCommandStack;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.ui.URIEditorInput;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
import org.eclipse.emf.edit.ui.view.ExtendedPropertySheetPage;
import org.eclipse.gef.DefaultEditDomain;
import org.eclipse.gef.EditPartFactory;
import org.eclipse.gef.GraphicalViewer;
import org.eclipse.gef.editparts.ScalableFreeformRootEditPart;
import org.eclipse.gef.ui.actions.ActionRegistry;
import org.eclipse.gef.ui.parts.GraphicalEditorWithFlyoutPalette;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorSite;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.actions.WorkspaceModifyOperation;
import org.eclipse.ui.views.contentoutline.IContentOutlinePage;
import org.eclipse.ui.views.properties.IPropertySheetPage;
import org.eclipse.ui.views.properties.PropertySheetPage;

import com.opcoach.training.diagram.Diagram;
import com.opcoach.training.diagram.DiagramElement;
import com.opcoach.training.diagram.DiagramFactory;

/**
 * @author olivier
 * 
 */
public abstract class DiagramEditor extends GraphicalEditorWithFlyoutPalette
{
	// Property sheet page uses the model.edit properties generated by EMF
	private PropertySheetPage propertySheetPage;

	/**
	 * This is the one adapter factory used for providing views of the model.
	 * and propertySources
	 */
	protected ComposedAdapterFactory adapterFactory;

	// The root object edited by this editor
	private EObject rootObject;

	/**
	 * This keeps track of the editing domain that is used to track all changes
	 * to the model. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AdapterFactoryEditingDomain editingDomain;

	public DiagramEditor()
	{
		super();
		// GEF Edit Domain
		setEditDomain(new DefaultEditDomain(this));

		// other init will be done during the call to 'init(Site, EditorInput)
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * org.eclipse.gef.ui.parts.GraphicalEditor#init(org.eclipse.ui.IEditorSite,
	 * org.eclipse.ui.IEditorInput)
	 */
	public void initOld(IEditorSite site, IEditorInput input) throws PartInitException
	{
		super.init(site, input);

		// initialize EMF editing model
		initializeEMFEditingDomain();

		EObject element = null;
		Resource resource = null;
		ResourceSet resourceSet = editingDomain.getResourceSet();
		if (input instanceof URIEditorInput)
		{
			element = resourceSet.getEObject(((URIEditorInput) input).getURI(), true);
			resource = resourceSet.getResource(((URIEditorInput) input).getURI(), true);
		} else
		{

			final IFile file = ((IFileEditorInput) input).getFile();
			final URI uri = URI.createPlatformResourceURI(file.getFullPath().toString(), false);
			// resource with respect to EMF model
			try
			{
				resource = resourceSet.getResource(uri, true);
			} catch (Exception e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			// resource = editingDomain.getResourceSet().getResource(uri, true);
			// getting the root element and cast as Level
			// MB, 03/06/09 : on verifie que cet element est bien un Level, car
			// lors de la creation
			// d'un jeu .games depuis la navigateur, c'est un Game et on ne peut
			// alors l'ouvrir
			element = resource.getContents().get(0);
		}

		if (resource != null)
		{
			Adapter adapter = new AdapterFactoryEditingDomain.EditingDomainProvider(editingDomain);
			resource.eAdapters().add(adapter);
		}

		// Set title on editor
		setPartName(input.getName());

		// Set viewer contents
		if ((element != null) && element instanceof EObject)
			rootObject = (EObject) element;
	}

	private static EObject defaultRootObject = null;

	/** METHODE A ENLEVER... JUSTE LA POUR TESTER SUR DEFAUTL AGENCY */
	public static void initEObject(EObject o)
	{
		defaultRootObject = o;

	}

	public void init(IEditorSite site, IEditorInput input) throws PartInitException
	{
		super.init(site, input);

		// Il faudra gŽrer ici un editorInput de type RentalAgency.

		// initialize EMF editing model
		initializeEMFEditingDomain();

		// Check if file is a domain model, or if it's a diagram.
		// For diagram, file name should end with 'diagram', if not, it will
		// create the file by saving

		EObject element = null;
		ResourceSet resourceSet = editingDomain.getResourceSet();
		Resource resource = null;
		if (input instanceof URIEditorInput)
		{
			element = resourceSet.getEObject(((URIEditorInput) input).getURI(), true);
			resource = resourceSet.getResource(((URIEditorInput) input).getURI(), true);
		} else if (input instanceof IFileEditorInput)
		{

			final IFile file = ((IFileEditorInput) input).getFile();
			final URI uri = URI.createPlatformResourceURI(file.getFullPath().toString(), false);
			// resource with respect to EMF model
			try
			{
				resource = resourceSet.getResource(uri, true);
				element = resource.getContents().get(0);

			} catch (Exception e)
			{
				DiagramCoreActivator.log("Unable to open file : " + uri + ". Will use the default object", IStatus.ERROR);
				e.printStackTrace();
				element = defaultRootObject;
			}

			// AN EObject has been read. Is it a diagram or an simple object ?
			if (!(element instanceof Diagram))
			{
				diagram = DiagramFactory.eINSTANCE.createDiagram();
				diagram.setContent(element);
			} else
			{
				diagram = (Diagram) element;
			}

			// Diagram is may be empty (first time usage after creation) -> must
			// fill it with node or connections.
			if (diagram.getElements().size() == 0 && diagram.getContent().eContents().size() > 0)
			{
				// Must fill the diagram with a default context according to
				// node or connections
				fillDiagram(diagram);
			}
		}

		if (resource != null)
		{
			Adapter adapter = new AdapterFactoryEditingDomain.EditingDomainProvider(editingDomain);
			resource.eAdapters().add(adapter);
		}

		// Set title on editor
		setPartName(input.getName());

		// Set viewer contents
		rootObject = diagram;
	}

	/** The default delta x to layout figures in first layout */
	protected int DX = 50;
	
	/** The default delta x to layout figures in first layout */
	protected int DY = 50;
	
	/** The default nb of column to layout figures */
	protected int NB_COL = 10;
	
	/** Fill a diagram with diagram element the first time it's opened. */
	protected void fillDiagram(Diagram diagram)
	{
		EObject rootElt = diagram.getContent();
		DiagramFactory f = DiagramFactory.eINSTANCE;
		DiagramElement de = null;
		int x = 0;
		int y = 0;
		int col = 0;
		
		for (EObject child : getChildren(rootElt))
		{
			if (isNode(child))
			{
				de = f.createNode();
			} else if (isConnection(child))
			{
				de = f.createConnection();
			} else
			{
				DiagramCoreActivator.log("Object of class " + child.eClass().getName() + " has no mapping to node or connection", IStatus.WARNING);
			}

			if (de != null)
			{
				de.setModel(child);
				// Must locate the model element... 
				de.setX(x);
				de.setY(y);
				de.setW(DX);
				de.setH(DY);
				
				col++;
				if ( col == NB_COL)
				{
					// Go to next line
					x = 0;
					y += DY+1;
					col = 0;
				}
				else
				{
					x += DX+1;
				}
				// Add this element on diagram.
				diagram.getElements().add(de);
				
			}
			
		} // end for each child.

	}
	
	/**
	 * Get children to be disiplayed in editor. By default returns the contents.
	 * may be overriden by subEditor
	 * 
	 * @param rootObject
	 * @return the list of objects to be returned for the root element
	 */
	
	protected List<EObject> getChildren(EObject rootObject)
	{
		return rootObject.eContents();
	}

	/**
	 * @return the diagram
	 */
	public Diagram getDiagram()
	{
		return diagram;
	}

	/**
	 * Initialize the edit domain using factory provided
	 * 
	 * @see org.eclipse.emf.edit.provider#ComposedAdapterFactory
	 */
	protected void initializeEMFEditingDomain()
	{
		// Create an adapter factory that yields item providers.
		adapterFactory = new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);
		adapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());
		adapterFactory.addAdapterFactory(getEmfEditAdapterFactory());
		adapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());

		// EMF Editing Domain.
		editingDomain = new AdapterFactoryEditingDomain(adapterFactory, new BasicCommandStack());
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.gef.ui.parts.GraphicalEditorWithFlyoutPalette#
	 * initializeGraphicalViewer()
	 */
	@Override
	protected void initializeGraphicalViewer()
	{
		// element associated to root edit part
		GraphicalViewer viewer = getGraphicalViewer();
		// viewer.setContents(createAgencyModel());
		viewer.setContents(rootObject);
	}

	@Override
	protected void configureGraphicalViewer()
	{
		super.configureGraphicalViewer();

		GraphicalViewer viewer = getGraphicalViewer();
		viewer.setRootEditPart(new ScalableFreeformRootEditPart());
		viewer.setEditPartFactory(new DiagramEditPartFactory(getModelEditPartFactory()));

	}

	/**
	 * Must implement the edit part factory for the object models (dont care of
	 * diagramEditpart)
	 */
	abstract protected EditPartFactory getModelEditPartFactory();

	/** pust implement how the diagram will be suffixed */
	abstract protected String getDiagramFileExtension();

	abstract protected boolean isNode(EObject o);

	abstract protected boolean isConnection(EObject o);

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.part.EditorPart#doSave(org.eclipse.core.runtime.
	 * IProgressMonitor)
	 */
	@Override
	public void doSave(IProgressMonitor monitor)
	{
		try
		{
			// Save only resources that have actually changed.
			final Map<Object, Object> saveOptions = new HashMap<Object, Object>();
			saveOptions.put(Resource.OPTION_SAVE_ONLY_IF_CHANGED, Resource.OPTION_SAVE_ONLY_IF_CHANGED_MEMORY_BUFFER);
			saveOptions.put(XMLResource.OPTION_KEEP_DEFAULT_CONTENT, Boolean.TRUE);

			// Do the work within an operation because this is a long running
			// activity that modifies the workbench.
			WorkspaceModifyOperation operation = new WorkspaceModifyOperation()
				{
					@Override
					public void execute(IProgressMonitor monitor)
					{
						// Save the resources to the file system.
						boolean first = true;
						for (Resource resource : editingDomain.getResourceSet().getResources())
						{
							if ((first || !resource.getContents().isEmpty()) && !editingDomain.isReadOnly(resource))
							{
								try
								{
									resource.save(saveOptions);

								} catch (IOException e)
								{
									DiagramCoreActivator.log(e);
								}
								first = false;
							}
						}
					}
				};
			operation.run(new NullProgressMonitor());
			getCommandStack().markSaveLocation();
		} catch (Exception e)
		{
			DiagramCoreActivator.log(e);
		}
	}

	/**
	 * This is how the framework determines which interfaces we implement. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public Object getAdapter(Class key)
	{
		if (key.equals(IContentOutlinePage.class))
		{
			return null; // showOutlineView() ? getContentOutlinePage() : null;
		} else if (key.equals(IPropertySheetPage.class))
		{
			return getPropertySheetPage();
		} else if (key.equals(EditingDomain.class))
		{
			return (EditingDomain) editingDomain;
		} else
		{
			return super.getAdapter(key);
		}
	}

	/**
	 * This accesses a cached version of the property sheet. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public IPropertySheetPage getPropertySheetPage()
	{
		if (propertySheetPage == null)
		{
			propertySheetPage = new ExtendedPropertySheetPage(editingDomain);
			propertySheetPage.setPropertySourceProvider(new EditPartToPropertySourceAdapterFactory(getEmfEditAdapterFactory()));
		}
		return propertySheetPage;
	}

	/**
	 * Implements this method to return the AdapterFactory generated in edit emf
	 * layer
	 */
	public abstract AdapterFactory getEmfEditAdapterFactory();

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.gef.ui.parts.GraphicalEditor#getActionRegistry()
	 */
	@Override
	protected ActionRegistry getActionRegistry()
	{
		return super.getActionRegistry();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void dispose()
	{

		adapterFactory.dispose();

		if (propertySheetPage != null)
		{
			propertySheetPage.dispose();
		}

		super.dispose();
	}

	private boolean isDirty = false;

	private Diagram diagram;

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.gef.ui.parts.GraphicalEditor#isDirty()
	 */
	@Override
	public boolean isDirty()
	{
		return isDirty;
	}

	/*
	 * public boolean isDirty() { return (editingDomain == null) ? false :
	 * ((BasicCommandStack)editingDomain.getCommandStack()).isSaveNeeded(); }
	 */

	protected void setDirty(boolean dirty)
	{
		if (isDirty != dirty)
		{
			isDirty = dirty;
			firePropertyChange(PROP_DIRTY);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see
	 * org.eclipse.gef.ui.parts.GraphicalEditor#commandStackChanged(java.util
	 * .EventObject)
	 */
	@Override
	public void commandStackChanged(EventObject event)
	{
		super.commandStackChanged(event);
		// Set the dirty state
		setDirty(getEditDomain().getCommandStack().isDirty());
	}

}
